@rendermode RenderMode.InteractiveServer
@page "/{id:int}"

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject WRR_Reserv.Services.RoomService roomService
@inject SearchModel searchModel
@inject ErrorState ErrorStateService

<PageTitle>Home</PageTitle>

<div class="container rounded my-4 bg-gray-200 p-3">
    <EditForm  Model="searchModel"  OnValidSubmit="SearchSubmit" FormName="searchForm">
        <AntiforgeryToken />        
        <div class="form-row align-items-end rounded bg-white p-3 round-border">                 
            <div class="form-group col-12 text-danger">
                <DataAnnotationsValidator />
                <ValidationSummary />  
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger text-center">@errorMessage</p>
                }
            </div>
            <div class="form-group col-md-3 col-sm-12">
                <label for="arrivalDate">Arrival Date:</label>
                <InputDate id="arrivalDate" @bind-Value="searchModel.ArrivalDate" class="form-control text-box single-line" />              
            </div>

            <div class="form-group col-md-3 col-sm-12">
                <label for="departureDate">Departure Date:</label>
                <InputDate id="departureDate" @bind-Value="searchModel.DepartureDate" class="form-control text-box single-line" />                
            </div>

            <div class="form-group col">
                <label for="adults">Number of Adults:</label>                
                <InputSelect id="adults" @bind-Value="searchModel.Adults" class="form-control text-box single-line custom-select">
                    @foreach(var num in guestNum){
                        <option value="@num">@num</option>
                    }
                </InputSelect>                
            </div>

            <div class="form-group col">
                <label for="children">Number of Children:</label>
                <InputSelect id="children" @bind-Value="searchModel.Children" class="form-control text-box single-line">
                    <option value="0">0</option>
                    @foreach(var num in guestNum){
                        <option value="@num">@num</option>
                    }
                </InputSelect>

            </div>
            <div class="form-group col text-center">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>      
        </div>
    </EditForm>
</div>


<div class="container rounded my-4 bg-gray-200 p-3">
    <h2>Our Accommodations</h2>
    @if(roomList != null){
        foreach(var room in roomList)
        {
            <div class="row bg-white rounded p-2 m-2 round-border">
                <div class="col-md-4 viewmore-img-container">
                    <a class="simple-img" @onclick="() => ViewMore(room.roomType.RoomTypeID)"><img src="@($"https://localhost:44325/{room.mainImage}")" class="img-fluid w-100 rounded" alt="Room Image" /></a>

                </div>

                <div class="col mt-2">
                    <h4>@room.roomType.Name</h4>
                    <p><span class="fa fa-user"></span> Sleeps @room.MaxGuests <span class="pl-3 fa fa-bed"></span> @room.roomType.BedType</p>
                    @if(room.roomType?.Description.Length > 150)
                    {
                        <p>@room.roomType.Description.ToString().Substring(0, 150)...</p>
                    }
                    else
                    {
                        <p>@room.roomType.Description</p>
                    }               
                    <p class="text-right"><button class="btn btn-info" @onclick="() => ViewMore(room.roomType.RoomTypeID)">View More</button></p>
                </div>
            </div>
        }
    }
    else
    {
        <p>Loading Rooms....</p>
    }

</div>

<RoomDetailModal @ref="RoomDetailModal" selectedRoom="@selectedRoom"></RoomDetailModal>
@code {
    [Parameter]
    public int id { get; set; }

    List<int> guestNum = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    private string errorMessage;

    private List<ViewRoomModel>? roomList;
    private ViewRoomModel? selectedRoom;  
    private RoomDetailModal? RoomDetailModal;

    private bool IsVisible = false;
    private bool errorRead = false;

    protected override async Task OnInitializedAsync()
    {
        if (!errorRead && ErrorStateService != null && !string.IsNullOrEmpty(ErrorStateService.ErrorMessage))
        {
            errorMessage = ErrorStateService.ErrorMessage;           
            errorRead = true; // Prevents the error message from being read again
        }


        roomList = await roomService.GetAllRoomsAsync(id);
        selectedRoom = roomList.FirstOrDefault();        
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && selectedRoom != null)
        {
            IsVisible = false;
            await JS.InvokeVoidAsync("showModal", "roomModal");
        }
    }

    public async Task SearchSubmit()
    {
        errorMessage = null;
        if(searchModel != null)
        {
            searchModel.HotelId = id;
            Navigation.NavigateTo("/RoomResults");

        }
        StateHasChanged();
    }

    public void ViewMore(int roomTypeID)
    {
        selectedRoom = roomList.FirstOrDefault(x => x.roomType.RoomTypeID == roomTypeID);
        IsVisible = true;
        StateHasChanged();
    }

    public void ShowAsync()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void HideAsync()
    {
        IsVisible = false;
        StateHasChanged();
    }

   
}